{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMKDcfXC12EFfrrSPi8Yqou",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pascal-maker/Python/blob/master/labo9zonderuitleg\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ADyEM4R-fxAA"
      },
      "outputs": [],
      "source": [
        "Op basis van de inhoud van de PDF **\"Labo\\_09\\_Data\\_Preprocessing\\_Oplossingen\"** heb ik hieronder de drie Jupyter-notebooks netjes opgesplitst en gereconstrueerd uit de PDF. Je kunt deze kopiÃ«ren naar `.ipynb`-bestanden of plakken in een notebookomgeving (bv. Jupyter of Google Colab):\n",
        "\n",
        "---\n",
        "\n",
        "## ðŸ“˜ Notebook 1: IMDB Data Preprocessing\n",
        "\n",
        "```python\n",
        "# Labo 09 - IMDB Preprocessing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "dataset = pd.read_csv(\"IMDB.csv\")\n",
        "print(dataset.shape)\n",
        "\n",
        "# Missing values check\n",
        "missing_values_count = dataset.isnull().sum()\n",
        "print(missing_values_count)\n",
        "\n",
        "# Drop kolommen met meer dan 129 missing values\n",
        "dataset_dropped = dataset.dropna(thresh=129, axis=1)\n",
        "\n",
        "# Verwijder rijen waar genre, metascore en revenue alledrie ontbreken\n",
        "dataset_dropna = dataset_dropped.dropna(subset=['Metascore', 'Genre', 'Revenue'], how='all')\n",
        "\n",
        "# Verwijder rijen waar genre ontbreekt\n",
        "dataset_cleaned = dataset_dropna.dropna(subset=['Genre'])\n",
        "\n",
        "# Vervang ontbrekende waarden in Revenue en Metascore door gemiddelde\n",
        "gemiddelde_revenue = dataset['Revenue'].mean()\n",
        "gemiddelde_metascore = dataset['Metascore'].mean()\n",
        "\n",
        "dataset_cleaned = dataset_cleaned.fillna({\n",
        "    'Revenue': gemiddelde_revenue,\n",
        "    'Metascore': gemiddelde_metascore\n",
        "})\n",
        "\n",
        "# Visualisaties\n",
        "plt.figure(figsize=(15,6))\n",
        "sns.countplot(x='Year', data=dataset_cleaned)\n",
        "plt.title(\"Aantal films per jaar\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(15,6))\n",
        "sns.countplot(x='Rating', data=dataset_cleaned, order=dataset_cleaned['Rating'].value_counts().index)\n",
        "plt.title(\"Distributie van Ratings\")\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()\n",
        "\n",
        "# Extra analyse\n",
        "print(\"Meest voorkomende genre:\", dataset['Genre'].mode()[0])\n",
        "print(\"Director met meeste films:\", dataset['Director'].mode()[0])\n",
        "\n",
        "dataset_genre = dataset.groupby('Genre').max()\n",
        "genre_max = dataset_genre[dataset_genre['Revenue'] == dataset_genre['Revenue'].max()]\n",
        "genre_min = dataset_genre[dataset_genre['Revenue'] == dataset_genre['Revenue'].min()]\n",
        "print(\"Genre met hoogste revenue:\", genre_max.reset_index()['Genre'][0])\n",
        "print(\"Genre met laagste revenue:\", genre_min.reset_index().iloc[0,0])\n",
        "```\n",
        "\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## ðŸ“™ Notebook 2: Vision42 Sensor Dataset\n",
        "\n",
        "```python\n",
        "# Labo 09 - Vision42 Interpolatie\n",
        "\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "dataset = pd.read_csv(\"Vision42.csv\")\n",
        "print(dataset.shape)\n",
        "\n",
        "# Missing values\n",
        "print(dataset.isnull().sum())\n",
        "\n",
        "# Eerste 50 rijen plotten\n",
        "to_plot = dataset.iloc[:50, :]\n",
        "plt.figure(figsize=(10,10))\n",
        "ax = sns.barplot(x='date', y='N16_z', data=to_plot, color='blue')\n",
        "ax.grid(color='gray', linestyle='-', linewidth=0.5)\n",
        "ax.tick_params(axis='x', rotation=90)\n",
        "plt.show()\n",
        "\n",
        "# Lineaire interpolatie\n",
        "dataset_lineaire_interpolatie = dataset.interpolate(method='linear', limit_direction='forward')\n",
        "to_plot_lineair = dataset_lineaire_interpolatie.iloc[:50, :]\n",
        "plt.figure(figsize=(10,10))\n",
        "ax = sns.barplot(x='date', y='N16_z', data=to_plot_lineair, color='blue')\n",
        "ax.grid(color='gray', linestyle='-', linewidth=0.5)\n",
        "ax.tick_params(axis='x', rotation=90)\n",
        "plt.show()\n",
        "\n",
        "# Nearest interpolatie\n",
        "dataset_nearest_interpolatie = dataset.interpolate(method='nearest')\n",
        "to_plot_nearest = dataset_nearest_interpolatie.iloc[:50, :]\n",
        "plt.figure(figsize=(10,10))\n",
        "ax = sns.barplot(x='date', y='N16_z', data=to_plot_nearest, color='blue')\n",
        "ax.grid(color='gray', linestyle='-', linewidth=0.5)\n",
        "ax.tick_params(axis='x', rotation=90)\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "xCdu2etTf5tr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## ðŸ“— Notebook 3: Star Wars Data + One-hot encoding + AI\n",
        "\n",
        "```python\n",
        "# Labo 09 - Star Wars dataset + ML\n",
        "\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import linear_model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "dataset = pd.read_csv(\"StarWars.csv\")\n",
        "\n",
        "# Vervang 'Yes' en 'No' door 1 en 0\n",
        "dataset = dataset.replace({'Yes': 1, 'No': 0})\n",
        "\n",
        "# One-hot encoding\n",
        "columns_to_encode = ['Han Solo', 'Luke Skywalker', 'Princess Leia Organa', 'Anakin Skywalker',\n",
        "                     'Obi Wan Kenobi', 'Emperor Palpatine', 'Darth Vader', 'Lando Calrissian',\n",
        "                     'Boba Fett', 'C-3P0', 'R2 D2', 'Jar Jar Binks', 'Padme Amidala', 'Yoda',\n",
        "                     'Which character shot first?', 'Age', 'Education', 'Location']\n",
        "\n",
        "dataset = pd.concat([dataset, pd.get_dummies(dataset[columns_to_encode], prefix=columns_to_encode)], axis=1)\n",
        "dataset.drop(columns=columns_to_encode, inplace=True)\n",
        "\n",
        "# Drop kolom gender\n",
        "dataset.drop(['Gender'], axis=1, inplace=True)\n",
        "\n",
        "# Plot verdeling fans\n",
        "sns.countplot(x='StarWars fan', data=dataset)\n",
        "plt.show()\n",
        "\n",
        "# AI-model\n",
        "y = dataset['StarWars fan'].values\n",
        "X = dataset.drop('StarWars fan', axis=1)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=200, random_state=0)\n",
        "\n",
        "logreg = linear_model.LogisticRegression(C=1, solver='liblinear', class_weight='balanced', penalty='l1')\n",
        "logreg.fit(X_train, y_train)\n",
        "y_pred = logreg.predict(X_test)\n",
        "\n",
        "print('Logistic Regression Accuracy:', accuracy_score(y_test, y_pred)*100)\n",
        "print('Confusion Matrix:\\n', confusion_matrix(y_test, y_pred))\n",
        "\n",
        "RFCmodel = RandomForestClassifier(n_estimators=100, max_features=6)\n",
        "RFCmodel.fit(X_train, y_train)\n",
        "y_pred = RFCmodel.predict(X_test)\n",
        "\n",
        "print('Random Forest Accuracy:', accuracy_score(y_test, y_pred)*100)\n",
        "print('Confusion Matrix:\\n', confusion_matrix(y_test, y_pred))\n",
        "```\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "tS_xZH0yf-sP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}